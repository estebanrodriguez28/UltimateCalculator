/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package finalproject;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {
    @BeforeClass
    public static void initJFX() {
        new JFXPanel();
        Platform.runLater(() -> {
            Stage stage = new Stage();
            new MainApp().start(stage);
        });
    }

    @Test
    public void testLengthConversion() {
        MainApp app = new MainApp();
        MainApp.LengthConverter lengthConverter = app.new LengthConverter();
        double metersFeetResult = lengthConverter.convert(5, "Meters", "Feet");
        assertEquals(16.4042, metersFeetResult, 0.0001);
        double feetmetersResult = lengthConverter.convert(5, "Feet", "Meters");
        assertEquals(1.524, feetmetersResult, 0.0001);

        double inchesCentimeterResult = lengthConverter.convert(10, "Inches", "Centimeter");
        assertEquals(25.4, inchesCentimeterResult, 0.0001);
        double centimeterInchesResult = lengthConverter.convert(2, "Centimeter", "Inches");
        assertEquals(0.787402, centimeterInchesResult, 0.0001);


        double metersInchesResult = lengthConverter.convert(10, "Meters", "Inches");
        assertEquals(393.701, metersInchesResult, 0.0001);

        double inchesMeterResult = lengthConverter.convert(10, "Inches", "Meters");
        assertEquals(0.254, inchesMeterResult, 0.0001);

        double metersKilometersResult = lengthConverter.convert(10, "Meters", "Kilometers");
        assertEquals(0.01, metersKilometersResult, 0.0001);

        double kilometersMetersResult = lengthConverter.convert(10, "Kilometers", "Meters");
        assertEquals(10000.0, kilometersMetersResult, 0.0001);

        double metersMilesResult = lengthConverter.convert(10, "Meters", "Miles");
        assertEquals(0.00621371, metersMilesResult, 0.0001);

        double milesMetersResult = lengthConverter.convert(10, "Miles", "Meters");
        assertEquals(16093.4, milesMetersResult, 0.0001);

        double metersCentimetersResult = lengthConverter.convert(10, "Meters", "Centimeter");
        assertEquals(1000.0, metersCentimetersResult, 0.0001);

        double centimersMetersResult = lengthConverter.convert(10, "Centimeter", "Meters");
        assertEquals(0.1, centimersMetersResult, 0.0001);



        double feetFeetResult = lengthConverter.convert(10, "Feet", "Feet");
        assertEquals(10.0, feetFeetResult, 0.0001);

        double metersMetersResult = lengthConverter.convert(10, "Meters", "Meters");
        assertEquals(10.0, metersMetersResult, 0.0001);

        double inchesInchesResult = lengthConverter.convert(10, "Inches", "Inches");
        assertEquals(10.0, inchesInchesResult, 0.0001);

        double kilometersKilometersResult = lengthConverter.convert(10, "Kilometers", "Kilometers");
        assertEquals(10.0, kilometersKilometersResult, 0.0001);

        double milesMilesResult = lengthConverter.convert(10, "Miles", "Miles");
        assertEquals(10.0, milesMilesResult, 0.0001);


        double centimeterCentimeterResult = lengthConverter.convert(10, "Centimeter", "Centimeter");
        assertEquals(10.0, centimeterCentimeterResult, 0.0001);


        double feetInchesResult = lengthConverter.convert(10, "Feet", "Inches");
        assertEquals(120.0, feetInchesResult, 0.0001);

        double feetKilometersResult = lengthConverter.convert(10, "Feet", "Kilometers");
        assertEquals(0.003048, feetKilometersResult, 0.0001);


        double feetMilesResult = lengthConverter.convert(10, "Feet", "Miles");
        assertEquals(0.0018939400000000002, feetMilesResult, 0.0001);

        double feetCentimeterResult = lengthConverter.convert(10, "Feet", "Centimeter");
        assertEquals(304.8, feetCentimeterResult, 0.0001);

        double inchesFeetResult = lengthConverter.convert(10, "Inches", "Feet");
        assertEquals(0.8333, inchesFeetResult, 0.0001);

        double inchestoKilometers = lengthConverter.convert(10, "Inches", "Kilometers");
        assertEquals(2.54E-4, inchestoKilometers, 0.0001);

        double inchestoMilesResult = lengthConverter.convert(10, "Inches", "Miles");
        assertEquals(1.57828E-4, inchestoMilesResult, 0.0001);

        double kilometersFeetResult = lengthConverter.convert(10, "Kilometers", "Feet");
        assertEquals(32808.4, kilometersFeetResult, 0.0001);

        double kilometersInchesResult = lengthConverter.convert(10, "Kilometers", "Inches");
        assertEquals(393701.0, kilometersInchesResult, 0.0001);

        double kilometersMilesResult = lengthConverter.convert(10, "Kilometers", "Miles");
        assertEquals(6.21371, kilometersMilesResult, 0.0001);

        double kilometersCentimeterResult = lengthConverter.convert(10, "Kilometers", "Centimeter");
        assertEquals(1000000.0, kilometersCentimeterResult, 0.0001);

     

        double milesFeetResult = lengthConverter.convert(10, "Miles", "Feet");
        assertEquals(52800.0, milesFeetResult, 0.0001);

        double milesInches = lengthConverter.convert(10, "Miles", "Inches");
        assertEquals(633600.0, milesInches, 0.0001);

        double milesKilometers = lengthConverter.convert(10, "Miles", "Kilometers");
        assertEquals(16.09, milesKilometers, 0.0001);

        double milesCentimeters = lengthConverter.convert(10, "Miles", "Centimeter");
        assertEquals(1609000.0, milesCentimeters, 0.0001);

        double centimeterFeet = lengthConverter.convert(10, "Centimeter", "Feet");
        assertEquals(0.32808400000000004, centimeterFeet, 0.0001);

        double centimeterKilometers = lengthConverter.convert(10, "Centimeter", "Kilometers");
        assertEquals(1.0E-4, centimeterKilometers, 0.0001);

        double centimeterMiles = lengthConverter.convert(10, "Centimeter", "Miles");
        assertEquals(6.21371E-5, centimeterMiles, 0.0001);








    
    }

    @Test
    public void testWeightConversion() {
        MainApp app = new MainApp();
        MainApp.WeightConverter weightConverter = app.new WeightConverter();

        double kilogramsPoundsresult = weightConverter.convert(2, "Kilograms", "Pounds");
        assertEquals(4.41, kilogramsPoundsresult, 0.0001);

        double kilogramsKilogramsresult = weightConverter.convert(5, "Kilograms", "Kilograms");
        assertEquals(5.0, kilogramsKilogramsresult, 0.0001);

        double kilogramsOuncesResult = weightConverter.convert(5, "Kilograms", "Ounces");
        assertEquals(176.37, kilogramsOuncesResult, 0.0001);

        double kilogramsGramsResult = weightConverter.convert(5, "Kilograms", "Grams");
        assertEquals(5000.0, kilogramsGramsResult, 0.0001);

        double ouncesGramsResult = weightConverter.convert(16, "Ounces", "Grams");
        assertEquals(453.6, ouncesGramsResult, 0.0001);

        double ounceskilogramsResult = weightConverter.convert(5, "Ounces", "Kilograms");
        assertEquals(0.1417475, ounceskilogramsResult, 0.0001);

        double ouncesPoundsResult = weightConverter.convert(5, "Ounces", "Kilograms");
        assertEquals(0.1417475, ouncesPoundsResult, 0.0001);

        double ouncesOuncesResult = weightConverter.convert(5, "Ounces", "Ounces");
        assertEquals(5.0, ouncesOuncesResult, 0.0001);

        double poundsKilogramsResult = weightConverter.convert(5, "Pounds", "Kilograms");
        assertEquals(2.26796, poundsKilogramsResult, 0.0001);

        double poundsPoundsResult = weightConverter.convert(5, "Pounds", "Pounds");
        assertEquals(5.0, poundsPoundsResult, 0.0001);

        double poundsOuncesResult = weightConverter.convert(5, "Pounds", "Ounces");
        assertEquals(80.0, poundsOuncesResult, 0.0001);

        double poundsGramsResult = weightConverter.convert(5, "Pounds", "Grams");
        assertEquals(2268.0, poundsGramsResult, 0.0001);

        double gramsKilogramsResult = weightConverter.convert(5, "Grams", "Kilograms");
        assertEquals(0.005, gramsKilogramsResult, 0.0001);

        double gramsPoundsResult = weightConverter.convert(5, "Grams", "Pounds");
        assertEquals(0.011023100000000001, gramsPoundsResult, 0.0001);


        double gramsOuncesResult = weightConverter.convert(5, "Grams", "Ounces");
        assertEquals(0.17647, gramsOuncesResult, 0.0001);

        double gramsGramsResult = weightConverter.convert(5, "Grams", "Grams");
        assertEquals(5.0, gramsGramsResult, 0.0001);






    }

    @Test
    public void testTemperatureConversion() {
        MainApp app = new MainApp();
        MainApp.TemperatureConverter tempConverter = app.new TemperatureConverter();

        double celsiusFahrenheitresult = tempConverter.convert(0, "Celsius", "Fahrenheit");
        assertEquals(32, celsiusFahrenheitresult, 0.0001);

        double celsiusCelsiusResult = tempConverter.convert(10, "Celsius", "Celsius");
        assertEquals(10.0, celsiusCelsiusResult, 0.0001);

        double celsiusKelvinResult = tempConverter.convert(10, "Celsius", "Fahrenheit");
        assertEquals(50.0, celsiusKelvinResult, 0.0001);

        double fahrenheitKelvinResult = tempConverter.convert(32, "Fahrenheit", "Kelvin");
        assertEquals(273.15, fahrenheitKelvinResult, 0.0001);

        double fahrenheitCelsiusResult = tempConverter.convert(10, "Fahrenheit", "Celsius");
        assertEquals(-12.222222222222221, fahrenheitCelsiusResult, 0.0001);


        double fahrenheitFahrenheitResult = tempConverter.convert(10, "Fahrenheit", "Fahrenheit");
        assertEquals(10.0, fahrenheitFahrenheitResult, 0.0001);

        double kelvinCelsiusResult = tempConverter.convert(0, "Kelvin", "Celsius");
        assertEquals(-273.15, kelvinCelsiusResult, 0.0001);

        double kelvinFahrenheitResult = tempConverter.convert(0, "Kelvin", "Fahrenheit");
        assertEquals(-459.66999999999996, kelvinFahrenheitResult, 0.0001);

        double kelvinKelvinResult = tempConverter.convert(5, "Kelvin", "Kelvin");
        assertEquals(5.0, kelvinKelvinResult, 0.0001);
    }

    

   
}
